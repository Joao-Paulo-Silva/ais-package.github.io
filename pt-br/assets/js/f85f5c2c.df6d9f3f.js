"use strict";(self.webpackChunkais_project_github_io=self.webpackChunkais_project_github_io||[]).push([[6062],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),u=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(a),d=r,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||l;return a?n.createElement(f,o(o({ref:t},c),{},{components:a})):n.createElement(f,o({ref:t},c))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,o[1]=i;for(var u=2;u<l;u++)o[u]=a[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},774:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const l={id:"cell",title:"Cell",sidebar_label:"Cell - C\xe9lula-B de memoria",sidebar_position:2,pagination_next:null,keywords:["Binary","classifying","affinity threshold","Real-Valued","classifying","anomalies","K-Nearest Neighbors"],lastUpdatedAt:"2025/04/05",author:"Jo\xe3o Paulo"},o="Cell - C\xe9lula-B de memoria",i={unversionedId:"aisp-techniques/Clonal Selection Algorithms/AIRS/cell",id:"version-0.2.x/aisp-techniques/Clonal Selection Algorithms/AIRS/cell",title:"Cell",description:"Representa uma c\xe9lula-B de memoria.",source:"@site/i18n/pt-br/docusaurus-plugin-content-docs/version-0.2.x/aisp-techniques/Clonal Selection Algorithms/AIRS/Cell.md",sourceDirName:"aisp-techniques/Clonal Selection Algorithms/AIRS",slug:"/aisp-techniques/Clonal Selection Algorithms/AIRS/cell",permalink:"/ais-package.github.io/pt-br/docs/aisp-techniques/Clonal Selection Algorithms/AIRS/cell",draft:!1,tags:[],version:"0.2.x",lastUpdatedBy:"Jo\xe3o Paulo",lastUpdatedAt:1744077924,formattedLastUpdatedAt:"8 de abr. de 2025",sidebarPosition:2,frontMatter:{id:"cell",title:"Cell",sidebar_label:"Cell - C\xe9lula-B de memoria",sidebar_position:2,pagination_next:null,keywords:["Binary","classifying","affinity threshold","Real-Valued","classifying","anomalies","K-Nearest Neighbors"],lastUpdatedAt:"2025/04/05",author:"Jo\xe3o Paulo"},sidebar:"tutorialSidebar",previous:{title:"ABR - Bolha de reconhecimento artificial",permalink:"/ais-package.github.io/pt-br/docs/aisp-techniques/Clonal Selection Algorithms/AIRS/abr"}},s={},u=[{value:"Construtor _Cell:",id:"construtor-_cell",level:2},{value:"Fun\xe7\xe3o hyper_clonal_mutate(...)",id:"fun\xe7\xe3o-hyper_clonal_mutate",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"cell---c\xe9lula-b-de-memoria"},"Cell - C\xe9lula-B de memoria"),(0,r.kt)("p",null,"Representa uma c\xe9lula-B de memoria."),(0,r.kt)("h2",{id:"construtor-_cell"},"Construtor _Cell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class _Cell(\n    self,\n    size: Optional[int] = None,\n    vector: Optional[npt.NDArray] = None,\n    algorithm: Literal[\n        "continuous-features", "binary-features"\n    ] = "continuous-features",\n) -> None\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"size"))," (",(0,r.kt)("inlineCode",{parentName:"li"},"Optional[int]"),"): O n\xfamero de caracter\xedsticas do vetor. Se ",(0,r.kt)("inlineCode",{parentName:"li"},"vector")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"None"),", um vetor aleat\xf3rio \xe9 gerado. Defaults to None."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"vector"))," (",(0,r.kt)("inlineCode",{parentName:"li"},"Optional[npt.NDArray]"),"): Um vetor de caracter\xedsticas da c\xe9lula. Defaults to None."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},(0,r.kt)("em",{parentName:"strong"},"algorithm"))," (",(0,r.kt)("inlineCode",{parentName:"li"},'Literal["continuous-features", "binary-features"]'),'): O tipo de algoritmo para amostras cont\xednuas ou bin\xe1rias. Defaults to "continuous-features".')),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"fun\xe7\xe3o-hyper_clonal_mutate"},"Fun\xe7\xe3o hyper_clonal_mutate(...)"),(0,r.kt)("p",null,"Realiza a clonagem de N caracter\xedsticas a partir das caracter\xedsticas de uma c\xe9lula, gerando um conjunto de vetores mutados."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def hyper_clonal_mutate(self, n: int) -> npt.NDArray\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Os par\xe2metros de entrada s\xe3o:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"n")," (",(0,r.kt)("inlineCode",{parentName:"li"},"int"),"):N\xfamero de clones a serem gerados a partir de muta\xe7\xf5es na c\xe9lula original.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns:")," "),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"npt.NDArray"),": Um array contendo N vetores mutados da c\xe9lula original.")))}m.isMDXComponent=!0}}]);