"use strict";(self.webpackChunkais_project_github_io=self.webpackChunkais_project_github_io||[]).push([[9612],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=a,d=p["".concat(s,".").concat(f)]||p[f]||m[f]||i;return n?r.createElement(d,o(o({ref:t},u),{},{components:n})):r.createElement(d,o({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4679:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={id:"abr",title:"ABR",sidebar_label:"ABR - Artificial Recognition Ball",sidebar_position:1,keywords:["Binary","classifying","affinity threshold","Real-Valued","classifying","anomalies","K-Nearest Neighbors"],lastUpdatedAt:"2025/04/05",author:"Jo\xe3o Paulo"},o=void 0,l={unversionedId:"aisp-techniques/Clonal Selection Algorithms/AIRS/abr",id:"version-0.2.x/aisp-techniques/Clonal Selection Algorithms/AIRS/abr",title:"ABR",description:"ABR (Artificial Recognition Ball)",source:"@site/versioned_docs/version-0.2.x/aisp-techniques/Clonal Selection Algorithms/AIRS/ABR.md",sourceDirName:"aisp-techniques/Clonal Selection Algorithms/AIRS",slug:"/aisp-techniques/Clonal Selection Algorithms/AIRS/abr",permalink:"/ais-package.github.io/docs/aisp-techniques/Clonal Selection Algorithms/AIRS/abr",draft:!1,tags:[],version:"0.2.x",lastUpdatedBy:"Jo\xe3o Paulo",lastUpdatedAt:1749250016,formattedLastUpdatedAt:"Jun 6, 2025",sidebarPosition:1,frontMatter:{id:"abr",title:"ABR",sidebar_label:"ABR - Artificial Recognition Ball",sidebar_position:1,keywords:["Binary","classifying","affinity threshold","Real-Valued","classifying","anomalies","K-Nearest Neighbors"],lastUpdatedAt:"2025/04/05",author:"Jo\xe3o Paulo"},sidebar:"tutorialSidebar",previous:{title:"AIRS - Artificial Immune Recognition System",permalink:"/ais-package.github.io/docs/aisp-techniques/Clonal Selection Algorithms/AIRS/"},next:{title:"Cell - Memory B-cell",permalink:"/ais-package.github.io/docs/aisp-techniques/Clonal Selection Algorithms/AIRS/cell"}},s={},c=[{value:"ABR (Artificial Recognition Ball)",id:"abr-artificial-recognition-ball",level:2},{value:"Constructor _Cell:",id:"constructor-_cell",level:2},{value:"Function set_resource(...)",id:"function-set_resource",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"abr-artificial-recognition-ball"},"ABR (Artificial Recognition Ball)"),(0,a.kt)("p",null,"Individual from the set of recognizing cells (ABR), inherits characteristics from a B-cell, adding resource consumption"),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"ABR"))," extends the ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("a",{parentName:"strong",href:"Cell"},(0,a.kt)("inlineCode",{parentName:"a"},"_Cell")," class")),", inheriting its base functionality.")),(0,a.kt)("h2",{id:"constructor-_cell"},"Constructor _Cell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'class _Cell(\n    self,\n    size: Optional[int] = None,\n    vector: Optional[npt.NDArray] = None,\n    stimulation: Optional[float] = None,\n    algorithm: Literal[\n        "continuous-features", "binary-features"\n    ] = "continuous-features",\n) -> None\n')),(0,a.kt)("p",null,"A member of the ABR set inherits characteristics from a ",(0,a.kt)("inlineCode",{parentName:"p"},"_Cell")," with the addition of resource consumption."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Attributes:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"size"))," (",(0,a.kt)("inlineCode",{parentName:"li"},"Optional[int]"),"): The number of features in the vector. If ",(0,a.kt)("inlineCode",{parentName:"li"},"vector")," is ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),", a random vector is generated. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"vector"))," (",(0,a.kt)("inlineCode",{parentName:"li"},"Optional[npt.NDArray]"),"): A vector of cell features. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"stimulation"))," (",(0,a.kt)("inlineCode",{parentName:"li"},"Optional[float]"),"): The rate at which the cell stimulates antigens. Defaults to None."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"algorithm"))," (",(0,a.kt)("inlineCode",{parentName:"li"},'Literal["continuous-features", "binary-features"]'),'): The type of algorithm for continuous or binary samples. Defaults to "continuous-features".')),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"function-set_resource"},"Function set_resource(...)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"def set_resource(self, resource: float, amplified: float = 1) -> float:\n")),(0,a.kt)("p",null,"Updates the amount of resources available for an ABR after consumption. "),(0,a.kt)("p",null,"This function consumes the resources and returns the remaining amount of resources after consumption."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"The input parameter is:")),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"resource"))," (",(0,a.kt)("inlineCode",{parentName:"li"},"float"),"): Initial amount of resources."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},(0,a.kt)("em",{parentName:"strong"},"amplified"))," (",(0,a.kt)("inlineCode",{parentName:"li"},"float"),"): Amplifier for the resource consumption by the cell. It is multiplied by the cell's stimulus. The default value is 1.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Returns:")," "),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"(",(0,a.kt)("inlineCode",{parentName:"li"},"float"),"): The remaining amount of resources after consumption.")))}m.isMDXComponent=!0}}]);